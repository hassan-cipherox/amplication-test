/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ItemType as PrismaItemType,
  AttributeGroup as PrismaAttributeGroup,
  Item as PrismaItem,
} from "@prisma/client";

export class ItemTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ItemTypeCountArgs, "select">): Promise<number> {
    return this.prisma.itemType.count(args);
  }

  async itemTypes(
    args: Prisma.ItemTypeFindManyArgs
  ): Promise<PrismaItemType[]> {
    return this.prisma.itemType.findMany(args);
  }
  async itemType(
    args: Prisma.ItemTypeFindUniqueArgs
  ): Promise<PrismaItemType | null> {
    return this.prisma.itemType.findUnique(args);
  }
  async createItemType(
    args: Prisma.ItemTypeCreateArgs
  ): Promise<PrismaItemType> {
    return this.prisma.itemType.create(args);
  }
  async updateItemType(
    args: Prisma.ItemTypeUpdateArgs
  ): Promise<PrismaItemType> {
    return this.prisma.itemType.update(args);
  }
  async deleteItemType(
    args: Prisma.ItemTypeDeleteArgs
  ): Promise<PrismaItemType> {
    return this.prisma.itemType.delete(args);
  }

  async findAttributeGroups(
    parentId: string,
    args: Prisma.AttributeGroupFindManyArgs
  ): Promise<PrismaAttributeGroup[]> {
    return this.prisma.itemType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .AttributeGroups(args);
  }

  async findItems(
    parentId: string,
    args: Prisma.ItemFindManyArgs
  ): Promise<PrismaItem[]> {
    return this.prisma.itemType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .Items(args);
  }
}
