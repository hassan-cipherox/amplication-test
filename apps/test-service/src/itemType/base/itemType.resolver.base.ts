/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ItemType } from "./ItemType";
import { ItemTypeCountArgs } from "./ItemTypeCountArgs";
import { ItemTypeFindManyArgs } from "./ItemTypeFindManyArgs";
import { ItemTypeFindUniqueArgs } from "./ItemTypeFindUniqueArgs";
import { CreateItemTypeArgs } from "./CreateItemTypeArgs";
import { UpdateItemTypeArgs } from "./UpdateItemTypeArgs";
import { DeleteItemTypeArgs } from "./DeleteItemTypeArgs";
import { AttributeGroupFindManyArgs } from "../../attributeGroup/base/AttributeGroupFindManyArgs";
import { AttributeGroup } from "../../attributeGroup/base/AttributeGroup";
import { ItemFindManyArgs } from "../../item/base/ItemFindManyArgs";
import { Item } from "../../item/base/Item";
import { ItemTypeService } from "../itemType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ItemType)
export class ItemTypeResolverBase {
  constructor(
    protected readonly service: ItemTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ItemType",
    action: "read",
    possession: "any",
  })
  async _itemTypesMeta(
    @graphql.Args() args: ItemTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ItemType])
  @nestAccessControl.UseRoles({
    resource: "ItemType",
    action: "read",
    possession: "any",
  })
  async itemTypes(
    @graphql.Args() args: ItemTypeFindManyArgs
  ): Promise<ItemType[]> {
    return this.service.itemTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ItemType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ItemType",
    action: "read",
    possession: "own",
  })
  async itemType(
    @graphql.Args() args: ItemTypeFindUniqueArgs
  ): Promise<ItemType | null> {
    const result = await this.service.itemType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemType)
  @nestAccessControl.UseRoles({
    resource: "ItemType",
    action: "create",
    possession: "any",
  })
  async createItemType(
    @graphql.Args() args: CreateItemTypeArgs
  ): Promise<ItemType> {
    return await this.service.createItemType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemType)
  @nestAccessControl.UseRoles({
    resource: "ItemType",
    action: "update",
    possession: "any",
  })
  async updateItemType(
    @graphql.Args() args: UpdateItemTypeArgs
  ): Promise<ItemType | null> {
    try {
      return await this.service.updateItemType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemType)
  @nestAccessControl.UseRoles({
    resource: "ItemType",
    action: "delete",
    possession: "any",
  })
  async deleteItemType(
    @graphql.Args() args: DeleteItemTypeArgs
  ): Promise<ItemType | null> {
    try {
      return await this.service.deleteItemType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AttributeGroup], { name: "attributeGroups" })
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "read",
    possession: "any",
  })
  async findAttributeGroups(
    @graphql.Parent() parent: ItemType,
    @graphql.Args() args: AttributeGroupFindManyArgs
  ): Promise<AttributeGroup[]> {
    const results = await this.service.findAttributeGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Item], { name: "items" })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  async findItems(
    @graphql.Parent() parent: ItemType,
    @graphql.Args() args: ItemFindManyArgs
  ): Promise<Item[]> {
    const results = await this.service.findItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
