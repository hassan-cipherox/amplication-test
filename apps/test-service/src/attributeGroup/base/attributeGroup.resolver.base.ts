/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AttributeGroup } from "./AttributeGroup";
import { AttributeGroupCountArgs } from "./AttributeGroupCountArgs";
import { AttributeGroupFindManyArgs } from "./AttributeGroupFindManyArgs";
import { AttributeGroupFindUniqueArgs } from "./AttributeGroupFindUniqueArgs";
import { CreateAttributeGroupArgs } from "./CreateAttributeGroupArgs";
import { UpdateAttributeGroupArgs } from "./UpdateAttributeGroupArgs";
import { DeleteAttributeGroupArgs } from "./DeleteAttributeGroupArgs";
import { ItemTypeFindManyArgs } from "../../itemType/base/ItemTypeFindManyArgs";
import { ItemType } from "../../itemType/base/ItemType";
import { AttributeFindManyArgs } from "../../attribute/base/AttributeFindManyArgs";
import { Attribute } from "../../attribute/base/Attribute";
import { AttributeGroupService } from "../attributeGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AttributeGroup)
export class AttributeGroupResolverBase {
  constructor(
    protected readonly service: AttributeGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "read",
    possession: "any",
  })
  async _attributeGroupsMeta(
    @graphql.Args() args: AttributeGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AttributeGroup])
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "read",
    possession: "any",
  })
  async attributeGroups(
    @graphql.Args() args: AttributeGroupFindManyArgs
  ): Promise<AttributeGroup[]> {
    return this.service.attributeGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AttributeGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "read",
    possession: "own",
  })
  async attributeGroup(
    @graphql.Args() args: AttributeGroupFindUniqueArgs
  ): Promise<AttributeGroup | null> {
    const result = await this.service.attributeGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttributeGroup)
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "create",
    possession: "any",
  })
  async createAttributeGroup(
    @graphql.Args() args: CreateAttributeGroupArgs
  ): Promise<AttributeGroup> {
    return await this.service.createAttributeGroup({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AttributeGroup)
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "update",
    possession: "any",
  })
  async updateAttributeGroup(
    @graphql.Args() args: UpdateAttributeGroupArgs
  ): Promise<AttributeGroup | null> {
    try {
      return await this.service.updateAttributeGroup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AttributeGroup)
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "delete",
    possession: "any",
  })
  async deleteAttributeGroup(
    @graphql.Args() args: DeleteAttributeGroupArgs
  ): Promise<AttributeGroup | null> {
    try {
      return await this.service.deleteAttributeGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ItemType], { name: "itemTypes" })
  @nestAccessControl.UseRoles({
    resource: "ItemType",
    action: "read",
    possession: "any",
  })
  async findItemTypes(
    @graphql.Parent() parent: AttributeGroup,
    @graphql.Args() args: ItemTypeFindManyArgs
  ): Promise<ItemType[]> {
    const results = await this.service.findItemTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attribute], { name: "attributes" })
  @nestAccessControl.UseRoles({
    resource: "Attribute",
    action: "read",
    possession: "any",
  })
  async findAttributes(
    @graphql.Parent() parent: AttributeGroup,
    @graphql.Args() args: AttributeFindManyArgs
  ): Promise<Attribute[]> {
    const results = await this.service.findAttributes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
