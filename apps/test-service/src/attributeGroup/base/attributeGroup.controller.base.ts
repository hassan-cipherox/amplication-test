/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AttributeGroupService } from "../attributeGroup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AttributeGroupCreateInput } from "./AttributeGroupCreateInput";
import { AttributeGroup } from "./AttributeGroup";
import { AttributeGroupFindManyArgs } from "./AttributeGroupFindManyArgs";
import { AttributeGroupWhereUniqueInput } from "./AttributeGroupWhereUniqueInput";
import { AttributeGroupUpdateInput } from "./AttributeGroupUpdateInput";
import { ItemTypeFindManyArgs } from "../../itemType/base/ItemTypeFindManyArgs";
import { ItemType } from "../../itemType/base/ItemType";
import { ItemTypeWhereUniqueInput } from "../../itemType/base/ItemTypeWhereUniqueInput";
import { AttributeFindManyArgs } from "../../attribute/base/AttributeFindManyArgs";
import { Attribute } from "../../attribute/base/Attribute";
import { AttributeWhereUniqueInput } from "../../attribute/base/AttributeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AttributeGroupControllerBase {
  constructor(
    protected readonly service: AttributeGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AttributeGroup })
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAttributeGroup(
    @common.Body() data: AttributeGroupCreateInput
  ): Promise<AttributeGroup> {
    return await this.service.createAttributeGroup({
      data: data,
      select: {
        createdAt: true,
        id: true,
        label: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AttributeGroup] })
  @ApiNestedQuery(AttributeGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async attributeGroups(
    @common.Req() request: Request
  ): Promise<AttributeGroup[]> {
    const args = plainToClass(AttributeGroupFindManyArgs, request.query);
    return this.service.attributeGroups({
      ...args,
      select: {
        createdAt: true,
        id: true,
        label: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AttributeGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async attributeGroup(
    @common.Param() params: AttributeGroupWhereUniqueInput
  ): Promise<AttributeGroup | null> {
    const result = await this.service.attributeGroup({
      where: params,
      select: {
        createdAt: true,
        id: true,
        label: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AttributeGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAttributeGroup(
    @common.Param() params: AttributeGroupWhereUniqueInput,
    @common.Body() data: AttributeGroupUpdateInput
  ): Promise<AttributeGroup | null> {
    try {
      return await this.service.updateAttributeGroup({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          label: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AttributeGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAttributeGroup(
    @common.Param() params: AttributeGroupWhereUniqueInput
  ): Promise<AttributeGroup | null> {
    try {
      return await this.service.deleteAttributeGroup({
        where: params,
        select: {
          createdAt: true,
          id: true,
          label: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ItemTypes")
  @ApiNestedQuery(ItemTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ItemType",
    action: "read",
    possession: "any",
  })
  async findItemTypes(
    @common.Req() request: Request,
    @common.Param() params: AttributeGroupWhereUniqueInput
  ): Promise<ItemType[]> {
    const query = plainToClass(ItemTypeFindManyArgs, request.query);
    const results = await this.service.findItemTypes(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        label: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ItemTypes")
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "update",
    possession: "any",
  })
  async connectItemTypes(
    @common.Param() params: AttributeGroupWhereUniqueInput,
    @common.Body() body: ItemTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ItemTypes: {
        connect: body,
      },
    };
    await this.service.updateAttributeGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ItemTypes")
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "update",
    possession: "any",
  })
  async updateItemTypes(
    @common.Param() params: AttributeGroupWhereUniqueInput,
    @common.Body() body: ItemTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ItemTypes: {
        set: body,
      },
    };
    await this.service.updateAttributeGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ItemTypes")
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "update",
    possession: "any",
  })
  async disconnectItemTypes(
    @common.Param() params: AttributeGroupWhereUniqueInput,
    @common.Body() body: ItemTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ItemTypes: {
        disconnect: body,
      },
    };
    await this.service.updateAttributeGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attributes")
  @ApiNestedQuery(AttributeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attribute",
    action: "read",
    possession: "any",
  })
  async findAttributes(
    @common.Req() request: Request,
    @common.Param() params: AttributeGroupWhereUniqueInput
  ): Promise<Attribute[]> {
    const query = plainToClass(AttributeFindManyArgs, request.query);
    const results = await this.service.findAttributes(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        key: true,
        label: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attributes")
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "update",
    possession: "any",
  })
  async connectAttributes(
    @common.Param() params: AttributeGroupWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        connect: body,
      },
    };
    await this.service.updateAttributeGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attributes")
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "update",
    possession: "any",
  })
  async updateAttributes(
    @common.Param() params: AttributeGroupWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        set: body,
      },
    };
    await this.service.updateAttributeGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attributes")
  @nestAccessControl.UseRoles({
    resource: "AttributeGroup",
    action: "update",
    possession: "any",
  })
  async disconnectAttributes(
    @common.Param() params: AttributeGroupWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        disconnect: body,
      },
    };
    await this.service.updateAttributeGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
