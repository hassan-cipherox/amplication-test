/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AttributeGroup as PrismaAttributeGroup,
  ItemType as PrismaItemType,
  Attribute as PrismaAttribute,
} from "@prisma/client";

export class AttributeGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AttributeGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.attributeGroup.count(args);
  }

  async attributeGroups(
    args: Prisma.AttributeGroupFindManyArgs
  ): Promise<PrismaAttributeGroup[]> {
    return this.prisma.attributeGroup.findMany(args);
  }
  async attributeGroup(
    args: Prisma.AttributeGroupFindUniqueArgs
  ): Promise<PrismaAttributeGroup | null> {
    return this.prisma.attributeGroup.findUnique(args);
  }
  async createAttributeGroup(
    args: Prisma.AttributeGroupCreateArgs
  ): Promise<PrismaAttributeGroup> {
    return this.prisma.attributeGroup.create(args);
  }
  async updateAttributeGroup(
    args: Prisma.AttributeGroupUpdateArgs
  ): Promise<PrismaAttributeGroup> {
    return this.prisma.attributeGroup.update(args);
  }
  async deleteAttributeGroup(
    args: Prisma.AttributeGroupDeleteArgs
  ): Promise<PrismaAttributeGroup> {
    return this.prisma.attributeGroup.delete(args);
  }

  async findItemTypes(
    parentId: string,
    args: Prisma.ItemTypeFindManyArgs
  ): Promise<PrismaItemType[]> {
    return this.prisma.attributeGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ItemTypes(args);
  }

  async findAttributes(
    parentId: string,
    args: Prisma.AttributeFindManyArgs
  ): Promise<PrismaAttribute[]> {
    return this.prisma.attributeGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attributes(args);
  }
}
