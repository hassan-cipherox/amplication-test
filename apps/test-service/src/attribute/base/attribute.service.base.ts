/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Attribute as PrismaAttribute,
  AttributeGroup as PrismaAttributeGroup,
  ItemAttribute as PrismaItemAttribute,
} from "@prisma/client";

export class AttributeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AttributeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.attribute.count(args);
  }

  async attributes(
    args: Prisma.AttributeFindManyArgs
  ): Promise<PrismaAttribute[]> {
    return this.prisma.attribute.findMany(args);
  }
  async attribute(
    args: Prisma.AttributeFindUniqueArgs
  ): Promise<PrismaAttribute | null> {
    return this.prisma.attribute.findUnique(args);
  }
  async createAttribute(
    args: Prisma.AttributeCreateArgs
  ): Promise<PrismaAttribute> {
    return this.prisma.attribute.create(args);
  }
  async updateAttribute(
    args: Prisma.AttributeUpdateArgs
  ): Promise<PrismaAttribute> {
    return this.prisma.attribute.update(args);
  }
  async deleteAttribute(
    args: Prisma.AttributeDeleteArgs
  ): Promise<PrismaAttribute> {
    return this.prisma.attribute.delete(args);
  }

  async findAttributeGroups(
    parentId: string,
    args: Prisma.AttributeGroupFindManyArgs
  ): Promise<PrismaAttributeGroup[]> {
    return this.prisma.attribute
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .AttributeGroups(args);
  }

  async findItemAttributes(
    parentId: string,
    args: Prisma.ItemAttributeFindManyArgs
  ): Promise<PrismaItemAttribute[]> {
    return this.prisma.attribute
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ItemAttributes(args);
  }
}
