/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ItemAttributeService } from "../itemAttribute.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ItemAttributeCreateInput } from "./ItemAttributeCreateInput";
import { Item } from "../../item/base/Item";
import { ItemAttribute } from "./ItemAttribute";
import { ItemAttributeFindManyArgs } from "./ItemAttributeFindManyArgs";
import { ItemAttributeWhereUniqueInput } from "./ItemAttributeWhereUniqueInput";
import { ItemAttributeUpdateInput } from "./ItemAttributeUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ItemAttributeControllerBase {
  constructor(
    protected readonly service: ItemAttributeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemAttribute })
  @nestAccessControl.UseRoles({
    resource: "ItemAttribute",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createItemAttribute(
    @common.Body() data: ItemAttributeCreateInput
  ): Promise<ItemAttribute> {
    return await this.service.createItemAttribute({
      data: {
        ...data,

        Item: data.Item
          ? {
              connect: data.Item,
            }
          : undefined,

        attribute: data.attribute
          ? {
              connect: data.attribute,
            }
          : undefined,
      },
      select: {
        Item: {
          select: {
            id: true,
          },
        },

        attribute: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemAttribute] })
  @ApiNestedQuery(ItemAttributeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ItemAttribute",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async itemAttributes(
    @common.Req() request: Request
  ): Promise<ItemAttribute[]> {
    const args = plainToClass(ItemAttributeFindManyArgs, request.query);
    return this.service.itemAttributes({
      ...args,
      select: {
        Item: {
          select: {
            id: true,
          },
        },

        attribute: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemAttribute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ItemAttribute",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async itemAttribute(
    @common.Param() params: ItemAttributeWhereUniqueInput
  ): Promise<ItemAttribute | null> {
    const result = await this.service.itemAttribute({
      where: params,
      select: {
        Item: {
          select: {
            id: true,
          },
        },

        attribute: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemAttribute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ItemAttribute",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateItemAttribute(
    @common.Param() params: ItemAttributeWhereUniqueInput,
    @common.Body() data: ItemAttributeUpdateInput
  ): Promise<ItemAttribute | null> {
    try {
      return await this.service.updateItemAttribute({
        where: params,
        data: {
          ...data,

          Item: data.Item
            ? {
                connect: data.Item,
              }
            : undefined,

          attribute: data.attribute
            ? {
                connect: data.attribute,
              }
            : undefined,
        },
        select: {
          Item: {
            select: {
              id: true,
            },
          },

          attribute: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemAttribute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ItemAttribute",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteItemAttribute(
    @common.Param() params: ItemAttributeWhereUniqueInput
  ): Promise<ItemAttribute | null> {
    try {
      return await this.service.deleteItemAttribute({
        where: params,
        select: {
          Item: {
            select: {
              id: true,
            },
          },

          attribute: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
